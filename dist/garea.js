!function(t){"function"==typeof define&&define.amd?define(t):t()}(function(){"use strict";exports.Garea=class{constructor(t,s={}){if(t instanceof String)throw Error("Type invalid of identifier canvas");this._canvas=document.getElementById(t),this._config=this._validateConfig(s),this._context=this._canvas.getContext("2d"),this._points=null,this._drags=null,this._colors={points:"rgb(47, 177, 255)",area:"rgba(47, 175, 255, 0.5)"},this._resolution={w:this._canvas.offsetWidth,h:this._canvas.offsetHeight},this._callback={onchange:()=>{},onmouseup:()=>{},onmousedown:()=>{}}}set config(t){this._config=this._validateConfig(t)}set resolution(t){this._resolution=t}set points(t){this._drags={},this._points={},t.forEach((t,s)=>{this._drags[`p${s+1}`]=!1,this._points[`p${s+1}`]=t})}get points(){return Object.values(this._points)}setColor(t,s){this._colors.hasOwnProperty(t)&&(this._colors[t]=s)}onListener(t,s){this._callback.hasOwnProperty(t)&&(this._callback[t]=s)}reset(){this._points=null,this.draw(),this._callback.onchange(this.points)}_validateConfig(t){if("object"!=typeof t)throw Error("Type invalid of config area");return t.hasOwnProperty("r")||(t.r=5),t.hasOwnProperty("m")||(t.m=30),t}_validatePoints(){this._points||(this.points=[{x:this._config.m,y:this._config.m},{x:this._resolution.w-this._config.m,y:this._config.m},{x:this._resolution.w-this._config.m,y:this._resolution.h-this._config.m},{x:this._config.m,y:this._resolution.h-this._config.m}])}draw(){this._clear(),this._validatePoints(),this._createArea();for(const t in this._points)this._points.hasOwnProperty(t)&&this._createCircle(this._points[t]);this._onMouseDown(),this._onMouseUp(),this._onMouseMove()}_clear(){this._context.clearRect(0,0,this._resolution.w,this._resolution.h)}_createCircle(t){this._context.fillStyle=this._colors.points,this._context.beginPath(),this._context.arc(t.x,t.y,this._config.r,0,2*Math.PI,!0),this._context.closePath(),this._context.fill()}_createArea(){this._context.fillStyle=this._colors.area,this._context.beginPath(),this._context.moveTo(this._points.p1.x,this._points.p1.y);for(const t in this._points)this._points.hasOwnProperty(t)&&this._context.lineTo(this._points[t].x,this._points[t].y);this._context.closePath(),this._context.fill()}_onMouseDown(){this._canvas.onmousedown=t=>{for(var s in this._points)this._points.hasOwnProperty(s)&&t.offsetX>=this._points[s].x-(this._config.r+3)&&t.offsetX<=this._points[s].x+(this._config.r+3)&&t.offsetY>=this._points[s].y-(this._config.r+3)&&t.offsetY<=this._points[s].y+(this._config.r+3)&&(this._drags[s]=!0,this._canvas.style.cursor="crosshair");this._callback.onmousedown({x:t.offsetX,y:t.offsetY})}}_onMouseUp(){this._canvas.onmouseup=t=>{-1!==Object.values(this._drags).indexOf(!0)&&this._callback.onchange(this.points),this._canvas.style.cursor="default",this._drags={p1:!1,p2:!1,p3:!1,p4:!1},this._callback.onmouseup({x:t.offsetX,y:t.offsetY})}}_onMouseMove(){this._canvas.onmousemove=t=>{for(var s in this._drags)this._drags.hasOwnProperty(s)&&this._drags[s]&&(this._points[s]={x:t.offsetX,y:t.offsetY},this.draw())}}}});